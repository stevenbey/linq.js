Assert.throws([].aggregate(null), "aggregate: empty array", "Sequence contains no elements");
Assert.throws(numbers.aggregate, "aggregate: no accumulator", "Argument cannot be null. Parameter name: func");
Assert.equals(numbers.aggregate((v, n) => v + n), 11, "aggregate (numeric array): with accumulator");
Assert.equals(numbers.aggregate((v, n) => v + n, 10), 21, "aggregate (numeric array): with accumulator and numeric seed");
Assert.equals(numbers.aggregate((v, n) => v + n, 10, v => `The value is: ${v}`), "The value is: 21", "aggregate (numeric array): with accumulator, numeric seed and selector");
Assert.equals(objects.aggregate((v, n) => { v.x += n.x; return v; }).x, 11, "aggregate (object array): with accumulator");
Assert.equals(objects.aggregate((v, n) => { v.x += n.x; return v; }, { x: 10 }).x, 21, "aggregate (object array): with accumulator and object seed");
Assert.equals(objects.aggregate((v, n) => { v.x += n.x; return v; }, { x: 10 }, v => v.x), 21, "aggregate (object array): with accumulator, object seed and selector");
//Assert.throws(function() { numbers.max(0) }, 'max: non-function selector', ArgumentException);
//Assert.equals(numbers.max(), 4, 'max (numeric array)');
//Assert.equals(numbers.max(function(v) { return v / 2 }), 2, 'max (numeric array): with selector');
//Assert.throws(function() { numbers.min(0) }, 'min: non-function selector', ArgumentException);
//Assert.equals(numbers.min(), 1, 'min (numeric array)');
//Assert.equals(numbers.min(function(v) { return v * 2 }), 2, 'min (numeric array): with selector');
//Assert.throws(function() { numbers.sum(0) }, 'sum: non-function selector', ArgumentException);
//Assert.equals(numbers.sum(), 11, 'sum (numeric array)');
//Assert.equals(numbers.sum(function(v) { return v / 2; }), 5.5, 'sum (numeric array): with selector');
//Assert.throws(objects.average, 'average (object array): without selector');
//Assert.equals(objects.average(function(v) { return v.x; }), 2.2, 'average (object array): with selector');
//Assert.throws(objects.max, 'max (object array): without selector');
//Assert.equals(objects.max(function(v) { return v.x }), 4, 'max (object array): with selector');
//Assert.throws(objects.min, 'min (object array): without selector');
//Assert.equals(objects.min(function(v) { return v.x }), 1, 'min (object array): with selector');
//Assert.throws(objects.sum, 'sum (object array): without selector');
//Assert.equals(objects.sum(function(v) { return v.x; }), 11, 'sum (object array): with selector'); 